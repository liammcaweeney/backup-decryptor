{"version":3,"sources":["utils/helpers.ts","copy.svg","App.tsx","index.tsx"],"names":["generateMasterSeedPhrase","masterPassword","masterKeystore","a","decryptFromKeystore","keystore","password","_decryptFromKeystore","WalletDecryptor","masterSeedPhrase","getMasterSeedPhrase","getSeedPhrase","walletKeystore","ed25519","publickeys","pubKey","data","Array","from","toBuffer","string","toString","CryptoJS","SHA256","enc","Hex","this","fromPassword","masterKeyStore","fromRecoveryCode","recoveryCode","entropy","bip39","App","useState","filename","setFilename","backupFileJSON","setBackupFileJSON","keyStores","setKeyStores","setPassword","setRecoveryCode","useRecoveryCode","setUseRecoveryCode","undefined","setMasterKeyStores","seedPhrases","setSeedPhrases","error","setError","useEffect","console","log","masterKey","wallets","Object","values","accounts","map","wallet","walletInfo","label","e","inputRef","useRef","getSeedPhraseFromWallet","walletDecryptor","Promise","all","keyStore","then","phrases","catch","handleSubmit","preventDefault","className","type","name","ref","style","display","required","onChange","target","files","length","file","fr","FileReader","readAsText","onloadend","result","backupFile","JSON","parse","err","onClick","current","click","onSubmit","placeholder","value","title","seedPhrase","src","CopyIcon","navigator","clipboard","writeText","alert","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb93a809.chunk.js","sourcesContent":["import CryptoJS from 'crypto-js'\nimport {\n  decryptFromKeystore as _decryptFromKeystore,\n  Keystore as xchainKeystore,\n} from '@xchainjs/xchain-crypto'\nimport * as bip39 from 'bip39'\n\nconst generateMasterSeedPhrase = async (\n  masterPassword: string,\n  masterKeystore: any\n): Promise<string> => {\n  return decryptFromKeystore(masterKeystore, masterPassword)\n}\nexport const entropyToPhrase = (entropy: string): string => {\n  return bip39.entropyToMnemonic(entropy)\n}\n\nconst hashStringValue = (string: string) => {\n  return CryptoJS.SHA256(string).toString(CryptoJS.enc.Hex)\n}\n\nconst decryptFromKeystore = async (\n  keystore: any,\n  password: string\n): Promise<string> => {\n  return  _decryptFromKeystore(\n    keystore as xchainKeystore,\n    password\n  )\n}\nexport class WalletDecryptor {\n  private readonly masterSeedPhrase: string\n\n  constructor(masterSeedPhrase: string) {\n    this.masterSeedPhrase = masterSeedPhrase\n  }\n\n  public static fromPassword = async (masterPassword: string, masterKeyStore: any) => {\n    const masterSeedPhrase = await generateMasterSeedPhrase(masterPassword, masterKeyStore)\n    return new WalletDecryptor(masterSeedPhrase);\n  };\n\n  public static fromRecoveryCode = async (recoveryCode: string) => {\n    const masterSeedPhrase = await entropyToPhrase(recoveryCode)\n    return new WalletDecryptor(masterSeedPhrase);\n  };\n\n  getMasterSeedPhrase = () => this.masterSeedPhrase\n\n\n  getSeedPhrase = async (\n    walletKeystore: any\n  ): Promise<string> => {\n    const { ed25519 } = walletKeystore.publickeys\n    const pubKey = walletKeystore.publickeys.ed25519.pubKey.data || Array.from(ed25519.toBuffer())\n    return decryptFromKeystore(walletKeystore, hashStringValue(`${this.masterSeedPhrase}${pubKey.toString()}`))\n  }\n}\n","export default __webpack_public_path__ + \"static/media/copy.c0a32f3c.svg\";","import './App.css';\nimport React, { useState, useRef, useEffect } from 'react'\nimport { WalletDecryptor } from './utils/helpers'\nimport CopyIcon from './copy.svg'\n\nfunction App() {\n  const[filename, setFilename] = useState('')\n  const[backupFileJSON, setBackupFileJSON] = useState<any>()\n  const[keyStores, setKeyStores] = useState<any>([])\n  const[password, setPassword] = useState<string>(\"\")\n  const[recoveryCode, setRecoveryCode] = useState<string>(\"\")\n  const[useRecoveryCode, setUseRecoveryCode] = useState<boolean>(false)\n  const[masterKeyStore, setMasterKeyStores] = useState<any>(undefined)\n  const[seedPhrases, setSeedPhrases] = useState<any>([])\n  const[error, setError] = useState<string>(\"\")\n\n  useEffect(() => {\n    try{\n      if (backupFileJSON) {\n        setError(\"\")\n        setPassword(\"\")\n        setSeedPhrases([])\n        setRecoveryCode(\"\")\n        console.log(backupFileJSON)\n        if(backupFileJSON.masterKey) {\n          setMasterKeyStores(backupFileJSON.masterKey)\n          const wallets = Object.values(backupFileJSON?.accounts?.wallets)\n          setKeyStores(wallets.map((wallet: any) => ({ ...wallet.walletInfo.data, label: wallet.label })))\n        } else if(backupFileJSON.masterKeystore) {\n          setMasterKeyStores(backupFileJSON.masterKeystore.masterKey)\n          const wallets = Object.values(backupFileJSON?.wallets?.wallets)\n          setKeyStores(wallets.map((wallet: any) => ({ ...wallet.walletInfo.data, label: wallet.label })))\n        } else {\n          setMasterKeyStores(undefined)\n          setKeyStores([{ ...backupFileJSON, label: 'Seed Phrase' }])\n        }\n      }\n    } catch(e) {\n      console.error(e)\n    }\n\n  }, [backupFileJSON])\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const handlerBrowse = (): void => {\n    if (inputRef && inputRef.current) inputRef.current.click()\n  }\n\n  const handlerFileChange = ({ target }: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!target) return\n\n    const { files } = target\n\n    if (!files) {\n      setFilename('Browse')\n      return\n    }\n\n    if (files.length) {\n      const file = files[0]\n      setFilename(file.name)\n      const fr = new FileReader()\n\n      fr.readAsText(file)\n      fr.onloadend = (e): void => {\n        if (!e.target || !e.target.result) return\n        try {\n          const backupFile = JSON.parse(e.target.result.toString())\n          setBackupFileJSON(backupFile)\n        } catch (err) {\n          console.log(err)\n        }\n      }\n    }\n  }\n\n  const getSeedPhraseFromWallet = (walletDecryptor: any) => {\n    Promise.all(keyStores.map((keyStore: any) => {\n        return walletDecryptor.getSeedPhrase(keyStore).then((phrases: any) => {\n          return { label: keyStore.label, phrases }\n        })\n      })\n    ).then(phrases => {\n        setSeedPhrases(phrases)\n        setError(\"\")\n      })\n      .catch(e => {\n        console.error(e)\n        setSeedPhrases([])\n        setError(e)\n      })\n  }\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    if(!masterKeyStore) {\n      WalletDecryptor.fromPassword(password, keyStores[0]).then(walletDecryptor =>{\n        return [{ label: keyStores[0].label, phrases: walletDecryptor.getMasterSeedPhrase() }]\n      }).then(phrases => {\n          setSeedPhrases(phrases)\n          setError(\"\")\n        })\n        .catch(e => {\n          console.error(e)\n          setSeedPhrases([])\n          setError(e)\n        })\n    }\n    else {\n      if (useRecoveryCode) {\n        WalletDecryptor.fromRecoveryCode(recoveryCode)\n          .then(getSeedPhraseFromWallet)\n          .catch(e => {\n            console.error(e)\n            setSeedPhrases([])\n            setError(e)\n        })\n      } else\n        WalletDecryptor.fromPassword(password, masterKeyStore)\n          .then(getSeedPhraseFromWallet)\n          .catch(e => {\n            console.error(e)\n            setSeedPhrases([])\n            setError(e)\n        })\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        XDEFI Backup Decryptor\n      </header>\n      <h2>\n        Select the a backup file to be decrypted\n      </h2>\n      <div className=\"body\">\n        {filename===''}\n        <input\n          type=\"file\"\n          name=\"file\"\n          ref={inputRef}\n          style={{ display: 'none' }}\n          required\n          onChange={handlerFileChange}\n        />\n        <div className=\"fileSelection\">\n          Select File <button onClick={handlerBrowse}> {filename==='' ? 'Browse Files' : filename} </button>\n        </div>\n\n        {!!keyStores.length &&\n          <form onSubmit={handleSubmit}>\n            <div className=\"password\">\n              {useRecoveryCode ?(<div>\n                  Recovery Code <input\n                  placeholder='  recovery code'\n                  onChange={e => setRecoveryCode(e.target.value)}\n                  type=\"text\" title=\"recoveryCode\"\n                  name=\"recoveryCode\"\n                  value={recoveryCode}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setUseRecoveryCode(false)}\n                  }\n                > Switch to password</button>\n                </div>\n              ):(<div>\n                Password <input\n                placeholder='  password'\n                onChange={e => setPassword(e.target.value)}\n                type=\"password\" title=\"password\"\n                name=\"password\" value={password}\n              />\n                {masterKeyStore && <button\n                    type=\"button\"\n                    onClick={() => {\n                      setUseRecoveryCode(true)\n                    }}\n                >\n                    Switch to Recovery Code\n                </button>\n                }\n              </div>)\n              }\n            </div>\n            <button type=\"submit\">Get Seed Phrase</button>\n          </form>\n        }\n        <div className=\"accounts\">\n          {seedPhrases.map((seedPhrase: any) => {\n            return (\n              <div className=\"account\" key={seedPhrase.label}>\n                {seedPhrase.label}: {seedPhrase.phrases}\n                <img\n                  src={CopyIcon}\n                  onClick={() => {\n                    navigator.clipboard.writeText(seedPhrase.phrases)\n                      .then(() => alert('Copied seed phrase'))}\n                  }\n                  alt={'copy'}/>\n              </div>\n            )\n          })}\n        </div>\n        {error !=='' && <div className=\"error\"> {error} </div> }\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}